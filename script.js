// --- BOA PR√ÅTICA: Executar o script apenas quando o HTML estiver totalmente carregado ---
document.addEventListener('DOMContentLoaded', () => {

  // --- 1. SELE√á√ÉO DE ELEMENTOS ---
  // Pegamos todos os elementos que vamos usar uma √∫nica vez e guardamos em constantes.
  const startButton = document.querySelector('.start-button');
  const heartButton = document.querySelector('.heart-button');

  const sound = document.getElementById('startSound');
  const counterElement = document.getElementById('counter');
  const counterContainer = document.querySelector('.counter-container');

  const dialogArea = document.getElementById('dialogos');
  const dialog1 = document.getElementById('fala1');
  const dialog2 = document.getElementById('fala2');
  // Se voc√™ tinha 'fala3' no HTML e n√£o quer mais, pode remover esta linha:
  // const dialog3 = document.getElementById('fala3');

  const finalMessageContainer = document.querySelector('.final-message-container');
  const messageElement = document.getElementById('message');

  // --- CONFIGURA√á√ïES ---
  // A data de in√≠cio do amor de voc√™s. Altere para a sua data!
  const startDate = new Date("2024-07-13T22:00:00");
  const texto1 = "Zelda: Link... mesmo sem dizer uma palavra, voc√™ me mostra o amor mais sincero.";
  const texto2 = "[Voc√™ recebeu:] Um cora√ß√£o inteiro. Use com cuidado. √â o meu. üíö";
  const textoFinal = "Meu amor, eu agrade√ßo para sempre o dia que lhe conheci!";
  // Se voc√™ tinha 'poeminja' e n√£o quer mais, pode remover esta linha:
  // const poeminha = "Em cada estrela no c√©u a brilhar,\nSinto o seu amor, a me guiar.\nEm cada passo, em cada can√ß√£o,\nVoc√™ √© a luz do meu cora√ß√£o.";


  // --- 2. ADI√á√ÉO DE EVENTOS (EVENT LISTENERS) ---
  // A forma moderna de lidar com cliques, sem 'onclick' no HTML.
  startButton.addEventListener('click', startLove);
  // Mantemos o evento do cora√ß√£o para que ele ainda possa ser clicado,
  // mesmo que o texto final j√° esteja vis√≠vel.
  heartButton.addEventListener('click', showFinalMessage);


  // --- 3. FUN√á√ïES ---

  /**
   * Fun√ß√£o para atualizar o contador de tempo.
   */
  function updateCounter() {
    const now = new Date();
    const diff = now - startDate;

    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);
    const minutes = Math.floor((diff / 1000 / 60) % 60);
    const seconds = Math.floor((diff / 1000) % 60);

    counterElement.innerText = `${days}d, ${hours}h, ${minutes}m, ${seconds}s`;
  }

  /**
   * Efeito de digita√ß√£o que retorna uma promessa.
   * Permite usar `await` para esperar a digita√ß√£o terminar.
   */
  function typeWriter(element, text, delay = 50) {
    return new Promise(resolve => {
      let i = 0;
      element.innerHTML = '';

      function typing() {
        // Lida com quebras de linha para textos multilinhas
        if (text.charAt(i) === '\n') {
          element.innerHTML += '<br>';
        } else {
          element.innerHTML += text.charAt(i);
        }
        i++;

        if (i < text.length) {
          setTimeout(typing, delay);
        } else {
          resolve();
        }
      }
      typing();
    });
  }

  /**
   * Pausa a execu√ß√£o por um determinado tempo em milissegundos.
   */
  function wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Fun√ß√£o principal que controla a sequ√™ncia: Bot√£o -> Di√°logo 1 -> Di√°logo 2 -> Texto Final -> Contador + Cora√ß√£o.
   */
  async function startLove() {
    // Esconde o bot√£o 'Start' e mostra a √°rea de di√°logo
    startButton.classList.add('hidden');
    dialogArea.classList.remove('hidden');

    // Tenta tocar o som
    sound.currentTime = 0;
    sound.play().catch(e => console.error("Navegador impediu a reprodu√ß√£o autom√°tica do √°udio.", e));

    await wait(500); // Pequena pausa

    // 1¬∫ Di√°logo
    dialog1.classList.remove('hidden');
    await typeWriter(dialog1, texto1);

    await wait(1500); // Pausa para leitura

    // 2¬∫ Di√°logo
    dialog2.classList.remove('hidden');
    await typeWriter(dialog2, texto2);

    await wait(1500); // Pausa para leitura

    // Esconde os di√°logos anteriores para focar no texto final
    dialog1.classList.add('hidden');
    dialog2.classList.add('hidden');

    // Mostra o cont√™iner da mensagem final E o texto final
    finalMessageContainer.classList.remove('hidden');
    messageElement.innerText = textoFinal; // Define o texto final
    messageElement.classList.remove('hidden'); // Torna o texto final vis√≠vel

    await wait(2000); // Pausa ap√≥s o texto final aparecer para o usu√°rio ler

    // AGORA SIM: Mostra o contador e o cora√ß√£o (que est√£o dentro do finalMessageContainer)
    // O counterContainer j√° √© exibido quando o finalMessageContainer √© mostrado,
    // mas garantimos que ele n√£o esteja 'hidden' por algum motivo.
    counterContainer.classList.remove('hidden');
    heartButton.classList.remove('hidden'); // Garante que o cora√ß√£o esteja vis√≠vel
  }

  /**
   * Mostra a mensagem final ao clicar no bot√£o de cora√ß√£o.
   * Agora que o texto final aparece automaticamente, esta fun√ß√£o pode ter outra utilidade,
   * ou ser removida se o cora√ß√£o n√£o tiver mais intera√ß√£o al√©m de sua presen√ßa visual.
   */
  function showFinalMessage() {
    // Como o texto j√° est√° vis√≠vel, o clique no cora√ß√£o pode n√£o fazer nada,
    // ou voc√™ pode adicionar uma nova intera√ß√£o aqui (ex: vibrar, mudar cor, etc.)
    console.log("Cora√ß√£o clicado! Mensagem final j√° vis√≠vel.");
  }


  // --- 4. INICIALIZA√á√ÉO ---
  // Inicia o contador imediatamente (ele estar√° escondido at√© ser revelado em startLove).
  updateCounter();
  setInterval(updateCounter, 1000); // Continua atualizando o contador em segundo plano.

});